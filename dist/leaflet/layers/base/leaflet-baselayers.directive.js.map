{"version":3,"sources":["leaflet/layers/base/leaflet-baselayers.directive.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAAkF;AAElF,2BAA6B;AAE7B,wDAAsD;AACtD,kEAAgE;AAChE,kFAA+E;AAC/E,4FAAwF;AACxF,sGAA4F;AAM5F,IAAa,0BAA0B;IAetC,oCAAY,gBAAkC;QAC7C,IAAI,CAAC,gBAAgB,GAAG,IAAI,mDAAuB,CAAC,gBAAgB,CAAC,CAAC;QACtE,IAAI,CAAC,aAAa,GAAG,IAAI,4DAA2B,EAAE,CAAC;IACxD,CAAC;IAED,6CAAQ,GAAR;QAEC,eAAe;QACf,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;QAE7B,wCAAwC;QACxC,IAAI,CAAC,aAAa;aAChB,IAAI,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,oBAAoB,CAAC;aAChE,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC;QAExC,kEAAkE;QAClE,IAAI,CAAC,aAAa,EAAE,CAAC;IACtB,CAAC;IAED,gDAAW,GAAX,UAAY,OAAwC;QAEnD,yBAAyB;QACzB,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,aAAa,CACjB,OAAO,CAAC,YAAY,CAAC,CAAC,YAAY,EAClC,OAAO,CAAC,YAAY,CAAC,CAAC,aAAa,CAAC,CAAC;QACvC,CAAC;IAEF,CAAC;IAES,kDAAa,GAAvB,UAAwB,aAAqC,EAAE,cAAsC;QAEpG,4BAA4B;QAC5B,IAAI,CAAC,aAAa,CAAC,sBAAsB,CACxC,IAAI,gEAA0B,CAAC,aAAa,CAAC,EAC7C,IAAI,gEAA0B,CAAC,cAAc,CAAC,CAAC,CAAC;QAEjD,yBAAyB;QACzB,IAAI,CAAC,aAAa,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACO,kDAAa,GAAvB;QAEC,IAAI,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;QACzC,IAAI,MAAM,GAAG,0BAAW,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACrD,IAAI,UAAmB,CAAC;QAExB,qFAAqF;QACrF,GAAG,CAAC,SAAS,CAAC,UAAC,CAAC;YACf,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,UAAC,EAAE,IAAO,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,yBAAyB;QACzB,EAAE,CAAC,CAAC,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC;YACxB,8CAA8C;YAC9C,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;QAC7B,CAAC;QACD,IAAI,CAAC,CAAC;YACL,yEAAyE;YACzE,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3B,CAAC;QACF,CAAC;IAEF,CAAC;IACF,iCAAC;AAAD,CApFA,AAoFC,IAAA;AAhF4B;IAA3B,YAAK,CAAC,mBAAmB,CAAC;;8DAAoC;AAGzB;IAArC,YAAK,CAAC,6BAA6B,CAAC;;wEAA+C;AAPxE,0BAA0B;IAHtC,gBAAS,CAAC;QACV,QAAQ,EAAE,qBAAqB;KAC/B,CAAC;qCAgB6B,oCAAgB;GAflC,0BAA0B,CAoFtC;AApFY,gEAA0B","file":"leaflet-baselayers.directive.js","sourcesContent":["import { Directive, Input, OnChanges, OnInit, SimpleChange } from '@angular/core';\n\nimport * as L from 'leaflet';\n\nimport { LeafletUtil } from '../../core/leaflet.util';\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from '../control/leaflet-control-layers.wrapper';\nimport { LeafletControlLayersConfig } from '../control/leaflet-control-layers-config.model';\n\n\n@Directive({\n\tselector: '[leafletBaseLayers]'\n})\nexport class LeafletBaseLayersDirective\n\timplements OnChanges, OnInit {\n\n\t// Base Layers\n\t@Input('leafletBaseLayers') baseLayers: L.control.LayersObject;\n\n\t// Control Options\n\t@Input('leafletLayersControlOptions') layersControlOptions: L.Control.LayersOptions;\n\n\t// Active Base Layer\n\tbaseLayer: L.Layer;\n\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\tprivate controlLayers: LeafletControlLayersWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t\tthis.controlLayers = new LeafletControlLayersWrapper();\n\t}\n\n\tngOnInit() {\n\n\t\t// Init the map\n\t\tthis.leafletDirective.init();\n\n\t\t// Initially configure the controlLayers\n\t\tthis.controlLayers\n\t\t\t.init({ baseLayers: this.baseLayers }, this.layersControlOptions)\n\t\t\t.addTo(this.leafletDirective.getMap());\n\n\t\t// Sync the baselayer (will default to the first layer in the map)\n\t\tthis.syncBaseLayer();\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\t// Set the new baseLayers\n\t\tif (changes['baseLayers']) {\n\t\t\tthis.setBaseLayers(\n\t\t\t\tchanges['baseLayers'].currentValue,\n\t\t\t\tchanges['baseLayers'].previousValue);\n\t\t}\n\n\t}\n\n\tprotected setBaseLayers(newBaseLayers: L.control.LayersObject, prevBaseLayers: L.control.LayersObject) {\n\n\t\t// Update the layers control\n\t\tthis.controlLayers.setLayersControlConfig(\n\t\t\tnew LeafletControlLayersConfig(newBaseLayers),\n\t\t\tnew LeafletControlLayersConfig(prevBaseLayers));\n\n\t\t// Sync the new baseLayer\n\t\tthis.syncBaseLayer();\n\t}\n\n\t/**\n\t * Check the current base layer and change it to the new one if necessary\n\t */\n\tprotected syncBaseLayer() {\n\n\t\tlet map = this.leafletDirective.getMap();\n\t\tlet layers = LeafletUtil.mapToArray(this.baseLayers);\n\t\tlet foundLayer: L.Layer;\n\n\t\t// Search all the layers in the map to see if we can find them in the baselayer array\n\t\tmap.eachLayer((l) => {\n\t\t\tfoundLayer = layers.find((bl) => { return l === bl; });\n\t\t});\n\n\t\t// Did we find the layer?\n\t\tif (null != foundLayer) {\n\t\t\t// Yes - set the baselayer to the one we found\n\t\t\tthis.baseLayer = foundLayer;\n\t\t}\n\t\telse {\n\t\t\t// No - set the baselayer to the first in the array and add it to the map\n\t\t\tif (layers.length > 0) {\n\t\t\t\tthis.baseLayer = layers[0];\n\t\t\t\tthis.baseLayer.addTo(map);\n\t\t\t}\n\t\t}\n\n\t}\n}\n"]}